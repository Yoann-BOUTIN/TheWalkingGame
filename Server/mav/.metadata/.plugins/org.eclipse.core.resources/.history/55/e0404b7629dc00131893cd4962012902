package twg.service;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import twg.dao.UserDao;
import twg.entities.User;

@Component
@Path("/user")
public class UserRestService {
	
	
	@Autowired
	private UserDao userDao;
	
	/************************************ READ ************************************/
	/**
	 * Returns all resources (users) from the database
	 * 
	 * @return
	 * @throws IOException 
	 * @throws JsonMappingException 
	 * @throws JsonGenerationException 
	 */
	
	@GET
	@Path("/allUsers")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Map<String, List<User>> getUser() throws JsonGenerationException, JsonMappingException, IOException {
		
		Map<String, List<User>> user = userDao.getUser();
		
		return user; 
	}

	
	/**
	 * Return the user who have this id
	 * 
	 * @param id
	 * @return
	 * @throws JsonGenerationException
	 * @throws JsonMappingException
	 * @throws IOException
	 */
	@GET
	@Path("/id/{id}")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response findById(@PathParam("id") Long id) throws JsonGenerationException, JsonMappingException, IOException {
		
		User userById = userDao.getUserById(id);
		
		if (userById != null) {
			return Response
					.status(200)
					.entity(userById)
					.header("Access-Control-Allow-Headers", "X-extra-header")
					.allow("OPTIONS")
					.build();
		} else {
			return Response
					.status(404)
					.entity("The user with the id " + id + " does not exist")					
					.build();
		}
	}
	
	/**
	 * Return the user who have this id
	 * 
	 * @param id
	 * @return
	 * @throws JsonGenerationException
	 * @throws JsonMappingException
	 * @throws IOException
	 */
	@GET
	@Path("/pseudo")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response findByPseudo(@QueryParam("userPseudo") String pseudo) throws JsonGenerationException, JsonMappingException, IOException {
		
		User userByPseudo = userDao.getUserByPseudo(pseudo);
		
		if (userByPseudo != null) {
			return Response
					.status(200)
					.entity(userByPseudo)
					.header("Access-Control-Allow-Headers", "X-extra-header")
					.allow("OPTIONS")
					.build();
		} else {
			return Response
					.status(404)
					.entity("The user with the pseudo " + pseudo + " does not exist")					
					.build();
		}
	}
	
	/**
	 * Return the user who have this id
	 * 
	 * @param id
	 * @return
	 * @throws JsonGenerationException
	 * @throws JsonMappingException
	 * @throws IOException
	 */
	@GET
	@Path("/exist")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response existPseudo(@QueryParam("userPseudo") String pseudo) throws JsonGenerationException, JsonMappingException, IOException {
		
		Map<String, Boolean> existPseudo = userDao.userExist(pseudo);
		
			return Response
					.status(200)
					.entity(existPseudo)
					.header("Access-Control-Allow-Headers", "X-extra-header")
					.allow("OPTIONS")
					.build();
	}
	/************************************ CREATE ************************************/

	/**
	 * Adds a new resource (user) from the given json format (at least title
	 * and feed elements are required at the DB level)
	 * 
	 * @param user
	 * @return
	 */
	
	@PUT
	@Path("/newUser")
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	@Transactional
	public Response createUser(User user) {
		userDao.createUser(user);

		return Response.status(201)
				.entity("A new user has been created").build();
	}
	
	/**
	 * A list of resources (here users) provided in json format will be added
	 * to the database.
	 * 
	 * @param users
	 * @return
	 */

//	@POST
//	@Path("/newUsers")
//	@Consumes({ MediaType.APPLICATION_JSON })
//	@Transactional
//	public Response createUsers(List<User> users) {
//		for (User user : users) {
//			userDao.createUser(user);
//		}
//
//		return Response.status(204).build();
//	}

	/************************************ UPDATE ************************************/
	/**
	 * Updates the attributes of the user received via JSON for the given @param
	 * id
	 * 
	 * If the user does not exist yet in the database (verified by
	 * <strong>id</strong>) then the application will try to create a new
	 * user resource in the db
	 * 
	 * @param id
	 * @param user
	 * @return
	 */
//	@Path("/updateUser")
//	@PUT
//	@Consumes({ MediaType.APPLICATION_JSON })
//	@Produces({ MediaType.TEXT_HTML })
//	@Transactional
//	public Response updateUserById(User user) {
//		String message;
//		int status;
//		if (user.getId() != null) {
//			userDao.updateUser(user);
//			status = 200; // OK
//			message = "User has been updated";
//		} else if (userCanBeCreated(user)) {
//			userDao.createUser(user);
//			status = 201; // Created
//			message = "The user you provided has been added to the database";
//		} else {
//			status = 406; // Not acceptable
//			message = "The information you provided is not sufficient to perform either an UPDATE or "
//					+ " an INSERTION of the new user resource <br/>"
//					+ " If you want to UPDATE please make sure you provide an existent <strong>id</strong> <br/>"
//					+ " If you want to insert a new user please provide at least a <strong>title</strong> and the <strong>feed</strong> for the user resource";
//		}
//
//		return Response.status(status).entity(message).build();
//	}
//
//	private boolean userCanBeCreated(User user) {
//		return user.getUserPseudo() != null;
//	}

	/************************************ DELETE ************************************/
	@DELETE
	@Path("/delete")
	@Produces({ MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Transactional
	public Response deleteUserById(@QueryParam("id") Long id) {
		if (userDao.deleteUserById(id) == 1) {
			return Response.status(204).entity("All users have been successfully removed").build();
		} else {
			return Response
					.status(404)
					.entity("User with the id " + id
							+ " is not present in the database").build();
		}
	}

	@DELETE
	@Path("/deleteAllUsers")
	@Produces({ MediaType.TEXT_HTML })
	@Transactional
	public Response deleteUsers() {
		userDao.deleteUsers();
		return Response.status(200)
				.entity("All users have been successfully removed").build();
	}
}
